<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>GKD本地订阅收录申请</title>
    <link href="./2024/02/24/GKD%E6%9C%AC%E5%9C%B0%E8%AE%A2%E9%98%85%E6%94%B6%E5%BD%95%E7%94%B3%E8%AF%B7/"/>
    <url>./2024/02/24/GKD%E6%9C%AC%E5%9C%B0%E8%AE%A2%E9%98%85%E6%94%B6%E5%BD%95%E7%94%B3%E8%AF%B7/</url>
    
    <content type="html"><![CDATA[<p>请在下方评论区，按照<a href="https://github.com/Adpro-Team/GKD_THS_List/blob/dev/CONTRIBUTING.md">贡献文档</a>的说明留言</p>]]></content>
    
    
    
    <tags>
      
      <tag>GKD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GKD规则编写之属性-2</title>
    <link href="./2024/01/06/GKD%E8%A7%84%E5%88%99%E7%BC%96%E5%86%99%E4%B9%8B%E5%B1%9E%E6%80%A7-2/"/>
    <url>./2024/01/06/GKD%E8%A7%84%E5%88%99%E7%BC%96%E5%86%99%E4%B9%8B%E5%B1%9E%E6%80%A7-2/</url>
    
    <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h1><p>本篇主要讲述在GKD规则编写中不必需，但常用的<code>属性</code>。</p><p>如果没有看过上一篇的同学，请看完上一篇哦！</p><h1 id="1-正文"><a href="#1-正文" class="headerlink" title="1. 正文"></a>1. 正文</h1><h2 id="1-1-snapshotUrls"><a href="#1-1-snapshotUrls" class="headerlink" title="1.1 snapshotUrls"></a>1.1 snapshotUrls</h2><p><code>snapshotUrls</code>属性通常位于<code>rules</code>属性内，与<code>matches</code>属性同级。</p><p><code>snapshotUrls</code>属性后接字符串，字符串的内容是快照的导入链接。</p><p>那么，什么是快照？又有什么作用？</p><h3 id="1-1-1-快照"><a href="#1-1-1-快照" class="headerlink" title="1.1.1 快照"></a>1.1.1 快照</h3><p>以下对于<code>快照</code>的介绍来自@<a href="https://github.com/Snoopy1866">Snoopy1866（俗名锟斤拷）</a></p><blockquote><p>GKD 使用无障碍权限获取到某个广告弹窗的界面元素信息，并可以通过快照将界面元素信息永久保存，便于规则的书写和维护。</p><p>PS：快照不同于截图。截图仅包含界面的图像信息，而快照不仅包含界面的图像信息，还包含界面的元素信息，例如控件的名称和属性，以及控件与控件之间的位置关系信息。</p></blockquote><h3 id="1-1-2-格式"><a href="#1-1-2-格式" class="headerlink" title="1.1.2 格式"></a>1.1.2 格式</h3><p><code>snapshotUrls</code>属性的格式为：</p><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json">snapshotUrls<span class="token operator">:</span> '快照链接'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><code>snapshotUrls</code>属性的值也可以是数组，格式如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json">snapshotUrls<span class="token operator">:</span> <span class="token punctuation">[</span>    '快照链接<span class="token number">1</span>'<span class="token punctuation">,</span>    '快照链接<span class="token number">2</span>'<span class="token punctuation">,</span>    '...'<span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>请注意：快照链接必须以<code>https://i.gkd.li/import/</code>开头，关于如何获取该链接，可以前往@Snoopy1866编写的<a href="https://github.com/Snoopy1866/blogs/blob/main/software/gkd/gkd-rule-tutorial/gkd-rule-tutorial.md">教程处</a>查看</strong></p><p><code>snapshotUrls</code>属性所处的位置：</p><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    groups<span class="token operator">:</span> <span class="token punctuation">[</span>        rules<span class="token operator">:</span> <span class="token punctuation">[</span>        snapshotUrls<span class="token operator">:</span> '快照链接'<span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="1-1-3-特殊情况"><a href="#1-1-3-特殊情况" class="headerlink" title="1.1.3 特殊情况"></a>1.1.3 特殊情况</h3><p>特别地，如果<code>rules</code>属性被简写为<code>rules: 规则</code>时，<code>snapshotUrls</code>的位置应在：</p><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    groups<span class="token operator">:</span> <span class="token punctuation">[</span>        rules<span class="token operator">:</span> '规则'<span class="token punctuation">,</span>        snapshotUrls<span class="token operator">:</span> '快照链接'<span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="1-2-quickFind"><a href="#1-2-quickFind" class="headerlink" title="1.2 quickFind"></a>1.2 quickFind</h2><p><code>quickFind</code>属性需要搭配<code>网页审查工具</code>使用。</p><p>关于<code>网页审查工具</code>，可以前往@Snoopy1866编写的<a href="https://github.com/Snoopy1866/blogs/blob/main/software/gkd/gkd-rule-tutorial/gkd-rule-tutorial.md">教程</a>处查看。</p><h3 id="1-2-1-格式"><a href="#1-2-1-格式" class="headerlink" title="1.2.1 格式"></a>1.2.1 格式</h3><p><code>quickFind</code>属性的接受的值的类型为：<code>boolean</code>类型，</p><p>即：<code>true</code>或<code>false</code>，</p><p>使用方法如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json">quickFind<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><strong>注意：当<code>quickFind</code>的值为<code>false</code>时，<code>quickFind</code>属性应省略不写</strong></p><h3 id="1-2-2-说明"><a href="#1-2-2-说明" class="headerlink" title="1.2.2 说明"></a>1.2.2 说明</h3><p>关于<code>quickFind</code>属性的说明：</p><h4 id="1-2-2-1-什么时候使用quickFind属性？"><a href="#1-2-2-1-什么时候使用quickFind属性？" class="headerlink" title="1.2.2.1 什么时候使用quickFind属性？"></a>1.2.2.1 什么时候使用quickFind属性？</h4><p>当<code>rules</code>属性内的规则的满足下列条件：</p><p> <code>末尾属性选择器</code>的<code>第一个属性选择表达式</code>符合下面的结构之一的选择器</p><ul><li><code>[id=&#39;abc&#39;]</code></li><li><code>[vid=&#39;abc&#39;]</code></li><li><code>[text=&#39;abc&#39;]</code></li><li><code>[text^=&#39;abc&#39;]</code></li><li><code>[text*=&#39;abc&#39;]</code></li><li><code>[text$=&#39;abc&#39;]</code></li></ul><p>比如 <code>A &gt; B + C[id=&#39;x&#39;][childCount=2]</code> 符合, 但 <code>A &gt; B + C[childCount=2][id=&#39;x&#39;]</code> 不符合</p><p>并且<code>网页审查工具</code>出现<code>可快速查找</code>提示（即一个对勾）时，可以使用<code>quickFind</code>属性。</p><h4 id="1-2-2-2-quickFind属性的位置"><a href="#1-2-2-2-quickFind属性的位置" class="headerlink" title="1.2.2.2 quickFind属性的位置"></a>1.2.2.2 quickFind属性的位置</h4><ol><li><p>当<code>quickFind</code>属性与<code>rules</code>属性同级时，该规则组的所有规则全部使用<code>quickFind</code>。</p><p>可以理解为：在该规则组下全局开启<code>quickFind</code>。</p></li><li><p>当<code>quickFind</code>属性位于<code>rules</code>属性内的其中一个对象中时，仅对该<code>子规则集</code>开启<code>quickFind</code>。</p><p>可以理解为：局部使用<code>quickFind</code></p></li></ol><h2 id="1-3-activityIds"><a href="#1-3-activityIds" class="headerlink" title="1.3 activityIds"></a>1.3 activityIds</h2><p><code>activityIds</code>属性需要搭配<code>网页审查工具</code>使用。</p><p>这里拓展下，什么是activity？</p><h3 id="1-3-1-activity"><a href="#1-3-1-activity" class="headerlink" title="1.3.1 activity"></a>1.3.1 activity</h3><p>Android的Activity是一个应用组件，一个应用通常由多个彼此松散联系的activity组成，在这里，你只需要知道这个就足够了。</p><p>GKD的activityIds与Android的Activity是一样的。</p><h3 id="1-3-2-介绍"><a href="#1-3-2-介绍" class="headerlink" title="1.3.2 介绍"></a>1.3.2 介绍</h3><p><code>activityIds</code>属性接受一个<code>String</code>类型（即字符串）的值 或者 一个<code>String</code>类型的数组</p><p>值的内容是规则执行的activityId</p><h4 id="1-3-2-1-activityIds属性的意义"><a href="#1-3-2-1-activityIds属性的意义" class="headerlink" title="1.3.2.1 activityIds属性的意义"></a>1.3.2.1 activityIds属性的意义</h4><blockquote><p>值的内容是规则执行的activityId</p></blockquote><p>如何理解这句话？</p><p>activityIds相当于是一个牢笼，将规则的生效范围局限在activityIds规定的Activity下。</p><p>比如，一个规则A，在Activity1下能正常工作，但在Activity2下误触。</p><p>这时，我们就需要用activityIds，将规则的生效范围限定在Activity1，使其不在Activity2生效</p><h4 id="1-3-2-2-格式"><a href="#1-3-2-2-格式" class="headerlink" title="1.3.2.2 格式"></a>1.3.2.2 格式</h4><p>使用方法如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json">activityIds<span class="token operator">:</span> 'activiId'<span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>或</p><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json">activityIds<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"activityId1"</span><span class="token punctuation">,</span>    <span class="token string">"activityId2"</span><span class="token punctuation">,</span>    ...<span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h4 id="1-3-2-3-说明"><a href="#1-3-2-3-说明" class="headerlink" title="1.3.2.3 说明"></a>1.3.2.3 说明</h4><p>类比<code>quickFind</code>属性，</p><ol><li><p>当<code>activityIds</code>属性与<code>rules</code>属性同级时，该规则组的所有规则全部在<code>activityIds</code>规定的activity中生效。</p></li><li><p>当<code>activityIds</code>属性位于<code>rules</code>属性内的其中一个对象中时，在仅是该<code>子规则集</code>在<code>activityIds</code>规定的activity中生效。</p></li></ol><h2 id="1-4-resetMatch"><a href="#1-4-resetMatch" class="headerlink" title="1.4 resetMatch"></a>1.4 resetMatch</h2><p>–TODO–</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>GKD</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GKD</tag>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GKD规则编写之属性-1</title>
    <link href="./2023/12/24/GKD%E8%A7%84%E5%88%99%E7%BC%96%E5%86%99%E4%B9%8B%E5%B1%9E%E6%80%A7-1/"/>
    <url>./2023/12/24/GKD%E8%A7%84%E5%88%99%E7%BC%96%E5%86%99%E4%B9%8B%E5%B1%9E%E6%80%A7-1/</url>
    
    <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h1><p>本教程不会有太多的图，大多数是理论讲解。</p><p>那么，现在先来解释下什么叫<code>属性</code>：</p><p><code>属性</code>，是GKD的专有名词。由于GKD的规则采用<code>JSON</code>（为方便表述，下文的<code>JSON</code>包含<code>JSON5</code>和<code>TypeScript</code>）编写，那么有接触过<code>JSON</code>的就能很轻松地理解<code>属性</code>了，不会<code>JSON</code>的也不用慌，每个<code>属性</code>的介绍都会给出它的用法示例，<code>JSON</code>的概念也会同时说明<del>，简直赚翻天，一篇教程，两种知识</del>。</p><p>那么给没有接触过<code>JSON</code>的同学介绍下：</p><p>在<code>JSON</code>中，通常一个完整的语句由一个<code>键值对</code>组成</p><p>何为<code>键值对</code>？就是指由<code>键</code>和<code>值</code>组成的形如下方这样的语句：</p><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json">键<span class="token operator">:</span> 值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><code>键值对</code>间用<code>,</code>分隔。</p><p>那么<code>属性</code>是什么？<code>属性</code>就是<code>键值对</code>中的<code>键</code>。</p><p>了解了这些之后，我们就先来学习几个在规则编写中必需的<code>属性</code>。</p><p><strong>需知：本教程采用JSON5</strong></p><h1 id="1-正文"><a href="#1-正文" class="headerlink" title="1. 正文"></a>1. 正文</h1><h2 id="1-1-id"><a href="#1-1-id" class="headerlink" title="1.1 id"></a>1.1 id</h2><p><code>id</code>属性是GKD识别应用的关键，一般而言是应用的包名。</p><p>其用法为：</p><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json">id<span class="token operator">:</span> '应用的id'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="1-2-name"><a href="#1-2-name" class="headerlink" title="1.2 name"></a>1.2 name</h2><p>不同于<code>属性选择器</code>中的<code>name属性</code>，这里的<code>name</code>指的是应用名称。</p><p>其用法为：</p><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json">name<span class="token operator">:</span> '应用名称'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="1-3-groups"><a href="#1-3-groups" class="headerlink" title="1.3 groups"></a>1.3 groups</h2><p>从这里开始，我们引出一个概念：<code>列表</code>。</p><h3 id="1-3-1-列表"><a href="#1-3-1-列表" class="headerlink" title="1.3.1 列表"></a>1.3.1 列表</h3><p>打开GKD的默认订阅，再随便点开一个应用，你可以发现里面是这样的：<img src="https://cdn.jsdelivr.net/gh/adproqwq/AdproImageHostingService@main/GKD%E6%95%99%E7%A8%8B-3.5rtwhri2jxg0.jpg" alt="规则组"></p><p>每一个开关就对应一个规则组，这么多个规则组组合起来就组成了列表。</p><p>总而言之就是：一个应用就是一个列表，列表中有很多的规则组。</p><h3 id="1-3-2-定义"><a href="#1-3-2-定义" class="headerlink" title="1.3.2 定义"></a>1.3.2 定义</h3><p><code>groups</code>的值应是一个数组，数组内应包含对象。</p><p>数组就代表一个列表，每一个对象都是一个规则组。</p><p>在<code>JSON</code>中，数组由一对<code>[]</code>包裹。那对象又是什么？</p><p>对象由一对<code>&#123;&#125;</code>包裹，其内是一个<strong>无序</strong>的<code>键值对</code>集合</p><p>例如：</p><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>name<span class="token operator">:</span> '张三'<span class="token punctuation">,</span>birthday<span class="token operator">:</span> '<span class="token number">2000.1</span>.<span class="token number">1</span>'<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>与</p><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>birthday<span class="token operator">:</span> '<span class="token number">2000.1</span>.<span class="token number">1</span>'<span class="token punctuation">,</span>name<span class="token operator">:</span> '张三'<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>是等价的。</p><h3 id="1-3-3-用法"><a href="#1-3-3-用法" class="headerlink" title="1.3.3 用法"></a>1.3.3 用法</h3><p>其用法为：</p><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json">groups<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>...<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>...<span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="1-4-key"><a href="#1-4-key" class="headerlink" title="1.4 key"></a>1.4 key</h2><p>从这里开始，除特殊说明外，下面包括以后的所有<code>属性</code>都位于<code>groups</code>内的对象内部。</p><hr><p>先看官方定义：</p><blockquote><p>当前规则组在列表中的唯一标识，也是客户端禁用&#x2F;启用此规则组的依据</p></blockquote><p><code>key</code>属性，表示该规则组在列表中的唯一标识，可以理解为规则组在列表中的身份证。</p><h3 id="1-4-1-用法"><a href="#1-4-1-用法" class="headerlink" title="1.4.1 用法"></a>1.4.1 用法</h3><p>那么<code>key</code>属性的用法是什么呢？</p><p>它的用法就是：</p><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json">key<span class="token operator">:</span> 常整数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="1-4-2-注意事项"><a href="#1-4-2-注意事项" class="headerlink" title="1.4.2 注意事项"></a>1.4.2 注意事项</h3><p>要注意：每一个列表中有且只能有一个相同的<code>key</code>值，</p><p>即：如果列表中已经存在了<code>key: 1</code>，那么就不能再有第二个<code>key: 1</code>。</p><h2 id="1-5-name"><a href="#1-5-name" class="headerlink" title="1.5 name"></a>1.5 name</h2><p>你可能会很疑惑，为什么又有一个<code>name</code>？</p><p>这两个<code>name</code>因为其所处位置的不同，其意义也不同。</p><p>1.2介绍的<code>name</code>与<code>groups</code>是同一级，表示的是应用名称；</p><p>而本节的<code>name</code>位于<code>groups</code>内，表示的是规则组名称。</p><p>其用法为：</p><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json">groups<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        name<span class="token operator">:</span> '规则组名称'    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="1-6-rules"><a href="#1-6-rules" class="headerlink" title="1.6 rules"></a>1.6 rules</h2><p><code>rules</code>属性与<code>groups</code>属性雷同，它们的值都是数组，数组内部都是对象。</p><p>但是与<code>groups</code>不同的是，<code>groups</code>的数组表示一个列表，而<code>rules</code>的数组表示规则组内的<strong>子规则集（非官方说法）</strong>。怎么去理解？</p><p>每个对象都是一个<code>子规则</code>，这些对象共同构成一个数组，就是<code>子规则集</code></p><h3 id="1-6-1-用法"><a href="#1-6-1-用法" class="headerlink" title="1.6.1 用法"></a>1.6.1 用法</h3><p>其用法如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json">groups<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        rules<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>...<span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="1-6-2-特殊情况"><a href="#1-6-2-特殊情况" class="headerlink" title="1.6.2 特殊情况"></a>1.6.2 特殊情况</h3><p><code>rules</code>属性在特殊情况下可以简写。</p><p>在<code>rules</code>的值数组内，有且只有一个对象时，可以简写为下面的样子：</p><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json">groups<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        rules<span class="token operator">:</span> '规则'    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="1-7-matches"><a href="#1-7-matches" class="headerlink" title="1.7 matches"></a>1.7 matches</h2><p>以下<code>属性</code>在一般情况下位于<code>rules</code>内部</p><hr><p><code>matches</code>属性的值是由<code>选择器</code>组成的一条或多条字符串（也就是常说的<code>规则</code>），如果是多条字符串，那么<code>matches</code>的值为一个数组。</p><h3 id="1-7-1-用法"><a href="#1-7-1-用法" class="headerlink" title="1.7.1 用法"></a>1.7.1 用法</h3><p>其用法如下：</p><ol><li><p>当值为一条字符串时：</p><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json">groups<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        rules<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                matches<span class="token operator">:</span> '规则'            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li><li><p>当值为多条字符串时：</p><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json">groups<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        rules<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                matches<span class="token operator">:</span> <span class="token punctuation">[</span>                    '规则<span class="token number">1</span>'<span class="token punctuation">,</span>                    '规则<span class="token number">2</span>'<span class="token punctuation">,</span>                    ...                <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li></ol><h2 id="1-8-综合运用"><a href="#1-8-综合运用" class="headerlink" title="1.8 综合运用"></a>1.8 综合运用</h2><p>使用上面介绍的<code>属性</code>，可以写出一个简单的模板。</p><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    id<span class="token operator">:</span> '应用id'<span class="token punctuation">,</span>    name<span class="token operator">:</span> '应用名称'<span class="token punctuation">,</span>    groups<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            key<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            rules<span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span>                    matches<span class="token operator">:</span> '规则'                <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这个模板对于导入本地订阅的同学已经足够了，但是如果想要为默认订阅添砖加瓦的话，这些是远远不够的。这就需要下篇的知识了。</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>GKD</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GKD</tag>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GKD规则编写之选择器-2</title>
    <link href="./2023/12/23/GKD%E8%A7%84%E5%88%99%E7%BC%96%E5%86%99%E4%B9%8B%E9%80%89%E6%8B%A9%E5%99%A8-2/"/>
    <url>./2023/12/23/GKD%E8%A7%84%E5%88%99%E7%BC%96%E5%86%99%E4%B9%8B%E9%80%89%E6%8B%A9%E5%99%A8-2/</url>
    
    <content type="html"><![CDATA[<h1 id="关系选择器"><a href="#关系选择器" class="headerlink" title="关系选择器"></a>关系选择器</h1><p>上一篇讲完了<code>属性选择器</code>，现在来讲<code>关系选择器</code></p><p><code>关系选择器</code>用于连接两个<code>属性选择器</code>，可以回忆一下1+2的例子，+号就是所谓<code>关系选择器</code>。</p><p><code>关系选择器</code>由两部分构成，分别是：<code>关系操作符</code>和<code>关系表达式</code></p><h2 id="关系操作符"><a href="#关系操作符" class="headerlink" title="关系操作符"></a>关系操作符</h2><p><code>关系操作符</code>，用于指示查找节点的方向</p><p>打个比方，将所有的节点比作一个大家庭，那么这个家庭里面就肯定会有兄弟姐妹、祖先后人。那么<code>关系操作符</code>就是用来描述两个节点间的关系。</p><p><code>关系操作符</code>有5种：<code>+</code>、<code>-</code>、<code>&gt;</code>、<code>&lt;</code>、<code>&lt;&lt;</code></p><h3 id=""><a href="#" class="headerlink" title="+"></a>+</h3><p><code>+</code>操作符，表示前置兄弟节点。</p><p>何为前置兄弟节点？</p><p>这里给一个样例：<code>A + B</code></p><p>用回那个比喻，A跟B就是家里的两兄弟，而且他们是“相邻”的兄弟（“相邻”的兄弟就是指大哥和二哥、三哥和四哥这样的数字相邻的兄弟）</p><p>A是大哥，B就是二哥</p><p>只能匹配相邻的兄弟节点，那岂不是很鸡肋？</p><p>放心，在讲完<code>关系表达式</code>后，就不会让你觉得鸡肋了</p><h3 id="-1"><a href="#-1" class="headerlink" title="-"></a>-</h3><p><code>-</code>操作符，表示后置兄弟节点。</p><p>还是那个样例，不过把<code>+</code>换成<code>-</code>变成：<code>A - B</code></p><p>A和B还是家里的两兄弟，也还是“相邻”兄弟，但是现在：</p><p>B是大哥，A是二哥</p><p>总的来说，可以类比数学的逆运算，<code>-</code>操作符就是<code>+</code>操作符的逆运算</p><h3 id="-2"><a href="#-2" class="headerlink" title="&gt;"></a>&gt;</h3><p><code>&gt;</code>操作符，表示祖先节点。</p><p>有请助教样例大哥：<code>A &gt; B</code></p><p>祖先节点，字面意思：就是谁是谁祖先</p><p>那么看到样例，A是B的祖先，很好理解吧</p><p>但是祖先也有辈分之分啊，这个样例中，A就是B的爸爸<del>（没错，你可以管你的爸爸叫祖先）</del></p><p>还是那句话，讲完<code>关系表达式</code>就可以解锁更高级操作了</p><h3 id="-3"><a href="#-3" class="headerlink" title="&lt;"></a>&lt;</h3><p><code>&lt;</code>操作符，表示直接<strong>子</strong>节点</p><p>还是助教大哥：<code>A &lt; B</code></p><p>还是按照字面理解：谁是谁儿子</p><p>样例中表达的就是：A节点是B节点儿子</p><h3 id="-4"><a href="#-4" class="headerlink" title="&lt;&lt;"></a>&lt;&lt;</h3><p><code>&lt;&lt;</code>操作符，表示子孙节点</p><p>不说了，懂得都懂：<code>A &lt;&lt; B</code></p><p>还是字面意思：谁是谁的子孙，也就是谁是谁的后代</p><p>样例就是：A是B的后代</p><h2 id="关系表达式"><a href="#关系表达式" class="headerlink" title="关系表达式"></a>关系表达式</h2><p>关系表达式分两种，<code>元组表达式</code>和<code>多项式表达式</code>。关系表达式被<code>()</code>括起来，并且位于关系操作符的后方</p><h3 id="元组表达式"><a href="#元组表达式" class="headerlink" title="元组表达式"></a>元组表达式</h3><p><code>元组表达式</code>由有序递增的正整数组成，可以理解为数学中的数列</p><p>下面是几个<code>元组表达式</code>：</p><ul><li><code>(1)</code></li><li><code>(1,2,3,4,5)</code></li><li><code>(2,4,6)</code></li></ul><h3 id="多项式表达式"><a href="#多项式表达式" class="headerlink" title="多项式表达式"></a>多项式表达式</h3><p><code>多项式表达式</code>中的<code>多项式</code>就是数学中的一元一次多项式，在<code>多项式表达式</code>中以n为未知数</p><p>从本质来说，<code>多项式表达式</code>是<code>元组表达式</code>的另一种表达方式</p><blockquote><p>这个元组的数字满足集合 <code>&#123;an+b|an+b&gt;=1,n&gt;=1&#125;(a,b是常整数)</code> 如果集合为空集则表达式非法</p></blockquote><p>那么，根据初中数学相关知识，我们可以知道：</p><ol><li><p>当a&lt;&#x3D;0时，存在一个等价的有限<code>元组表达式</code>，如：</p><ul><li><code>(-n+4)</code>等价于<code>(1,2,3)</code></li><li><code>(-3n+10)</code>等价于<code>(1,4,7)</code></li></ul></li><li><p>当a&gt;0时，存在一个等价的无限<code>元组表达式</code>，如：</p><ul><li><code>(n)</code>等价于<code>(1,2,3,...)</code></li><li><code>(2n-1)</code>等价于<code>(1,3,5,...)</code></li></ul></li></ol><h2 id="关系选择器-1"><a href="#关系选择器-1" class="headerlink" title="关系选择器"></a>关系选择器</h2><blockquote><p>将 关系操作符 和 关系表达式 连接起来就得到了 关系选择器</p></blockquote><h3 id="用法解释"><a href="#用法解释" class="headerlink" title="用法解释"></a>用法解释</h3><p>以下是5个<code>关系选择器</code>：</p><ul><li><code>A +5 B</code></li><li><code>A -5 B</code></li><li><code>A &gt;3 B</code></li><li><code>A &lt;3 B</code></li><li><code>A &lt;&lt;n B</code></li></ul><p>对于<code>A +5 B</code>，就是说：A是大哥，B就是六哥</p><p>同样的，对于<code>A -5 B</code>，A是六哥，B是大哥</p><p>对于<code>A &gt;3 B</code>，A是爷爷（设为第1代），B是曾孙子（则B为第4代）</p><p>但是<code>A &lt;3 B</code>有些许不同，不知道你有没有注意到：在介绍<code>&lt;</code>关系操作符时，<code>子</code>字被加粗了。</p><p>因为<code>A &lt;3 B</code>并不是曾孙子与爷爷的关系，而是三哥与爸爸的关系，即：A是B的三儿子</p><p>对于<code>A &lt;&lt;n B</code>，A是B的祖先，由于它的<code>多项式表达式</code>是<code>(n)</code>，等价的<code>元组表达式</code>就是<code>(1,2,3,...)</code>，所以可以找到A的所有B祖先</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>还记得上一篇讲过的<code>属性名</code>吗？其中的<code>index</code>、<code>depth</code>是确定两个节点之间关系的关键</p><blockquote><p><code>A +(a1,a2,a3,a_n) B</code> :  A.index 满足 B.index-(a_m), 其中 a_m 是元组的任意一个数字</p><p><code>A -(a1,a2,a3,a_n) B</code> : A.index 满足 B.index+(a_m)</p><p><code>A &gt;(a1,a2,a3,a_n) B</code> : A.depth 满足 B.depth-(a_m), 根节点的 depth&#x3D;0</p><p><code>A &lt;(a1,a2,a3,a_n) B</code> : A.index 满足 a_m-1</p><p><code>A &lt;&lt;(a1,a2,a3,a_n) B</code> : A.order 满足 a_m-1, A.order（无法通过网页审查工具得知） 是深度优先先序遍历的索引 (搭配 quickFind 使用)</p></blockquote><p>所以，确定两个节点的关系关键在于<code>index</code>和<code>depth</code>的值，而不是单纯的数户口。</p><p>例如：现在有2个<code>FrameLayout</code>，其中一个的<code>index</code>值是0，另一个的<code>index</code>值是3，但是它们在网页审查工具中是相邻的节点。如果你要使用<code>-</code>关系操作符选中<code>index</code>为3的<code>FrameLayout</code>，这时规则就不能写成<code>@FrameLayout[index=3] - FrameLayout[index=0]</code>了，而应写成<code>@FrameLayout[index=3] -3 FrameLayout[index=0]</code>。当然，实际中写成<code>FrameLayout[index=3]</code>会更好。</p><h3 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h3><blockquote><p>当 a&#x3D;0 或 b&#x3D;0 时, 括号可以省略, 比如 <code>A +(3n+0) B</code> -&gt; <code>A +(3n) B</code> -&gt; <code>A +3n B</code>，<code>A +(0n+3) B</code> -&gt; <code>A +(+3) B</code> -&gt; <code>A +3 B</code></p><p>当 a&#x3D;0 且 b&#x3D;1 时, an+b 可以省略, 比如 <code>A &lt;(0n+1) B</code> -&gt; <code>A &lt; B</code>, 此外 <code>A + B</code>,<code>A &gt; B</code> 都与等价的 css 语法语义相同</p><p>当 a&#x3D;1 且 b&#x3D;0 且操作符是 <code>&gt;</code>, 可以进一步简写, 比如 <code>A &gt;(1n+0) B</code> -&gt; <code>A &gt;n B</code> -&gt; <code>A B</code>, 这与等价的 css 语法语义相同</p></blockquote><p>当然，不简写也是可以的，就是会丧失一些代码的简洁性</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>那么，GKD规则编写之选择器的教程就到此结束，也欢迎在评论区留言探讨。</p><p>如果本教程有什么谬误，或者对本教程有什么建议的话，也欢迎在下方评论区给出你的建议。</p><p>本篇教程不算太完善，以后会慢慢优化的。</p><p>那么，祝你写的规则不会误触，不会失效！</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>GKD</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GKD</tag>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GKD规则编写之选择器-1</title>
    <link href="./2023/12/23/GKD%E8%A7%84%E5%88%99%E7%BC%96%E5%86%99%E4%B9%8B%E9%80%89%E6%8B%A9%E5%99%A8-1/"/>
    <url>./2023/12/23/GKD%E8%A7%84%E5%88%99%E7%BC%96%E5%86%99%E4%B9%8B%E9%80%89%E6%8B%A9%E5%99%A8-1/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本教程仅为个人理解，可能不严谨，请见谅。</p><p>本教程不会有太多的图<del>，别问，问就是懒得截</del></p><p>GKD的规则编写靠的就是选择器，选择器的作用就是根据信息去定位节点。</p><p>GKD所使用的选择器是类似CSS的选择器的，所以如果写过CSS的上手会更快一些。</p><p>下面正式开始。</p><hr><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>先展示下官方的介绍：</p><blockquote><p>与 css 类似, 一个选择器由 属性选择器 和 关系选择器 交叉组成, 并且开头末尾必须是 属性选择器</p><p>示例 <code>div &gt; img</code> 的结构是 <code>属性选择器 关系选择器 属性选择器</code>, 它表示选择一个 <code>img</code> 节点并且它父节点是 <code>div</code>, 这与相同 css 语法语义一致</p><p>另外 属性选择器 和 关系选择器 之前必须强制用空格隔开, 也就是 <code>div&gt;img</code> 是非法的, 必须写成 <code>div &gt; img</code></p></blockquote><blockquote><p>一个选择器由 属性选择器 和 关系选择器 交叉组成, 并且开头末尾必须是 属性选择器</p></blockquote><p>这句是什么意思呢？第二段也有例子，如果看不懂的话，用数学来举例就明白了：1+2</p><p>式子里的1和2就是所谓<code>属性选择器</code>，+号就是所谓<code>关系选择器</code>，开头和末尾必须是<code>属性选择器</code>的原因也就知道了，因为像 1+2+ 这样的式子是不完整的。</p><h1 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h1><p>官方的文档对于属性选择器的介绍太长，就不放全文了。</p><h2 id=""><a href="#" class="headerlink" title="@"></a>@</h2><p>现在介绍一下<code>@</code>。</p><blockquote><p><code>@</code> 表示选择此节点, 一条规则最后属性选择器 <code>@</code> 生效, 如果没有 <code>@</code>, 取最后一个属性选择器</p></blockquote><p>什么意思呢？这里用一条规则去举例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">FrameLayout &gt; @FrameLayout &gt; ViewGroup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>现在的<code>@</code>在第二个<code>FrameLayout</code>处，就是告诉程序：你要点击的是这个<code>FrameLayout</code>，而不是其它的节点。</p><p>如果现在将<code>@</code>删去，变成</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">FrameLayout &gt; FrameLayout &gt; ViewGroup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>会是什么结果？程序就不会点击第二个<code>FrameLayout</code>，而是点击最后的<code>ViewGroup</code>了。</p><p>可以将其理解为与下方的规则等价</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">FrameLayout &gt; FrameLayout &gt; @ViewGroup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="name属性"><a href="#name属性" class="headerlink" title="name属性"></a>name属性</h2><p>上节规则中的<code>FrameLayout</code>、<code>ViewGroup</code>到底是什么？</p><p>现在来介绍：name属性。</p><p><del>不是什么重点就随便写写啦</del></p><p><code>FrameLayout</code>、<code>ViewGroup</code>，包括常见的<code>TextView</code>、<code>ImageView</code>等等，都是节点的name属性，代表着该节点的类型<em>（个人理解）</em>。</p><blockquote><p>由于该选择器主要用于 Android 平台, 节点的 name 都是 java 类如 android.text.TextView 这种形式</p></blockquote><p><code>TextView</code>等价于<code>[name=&#39;TextView&#39;||name$=&#39;.TextView&#39;]</code>，其它也是一样的。</p><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><p>表达式有<code>逻辑表达式</code>和<code>布尔表达式</code>，表达式一般跟在<code>name属性</code>后面，用<code>[]</code>括起来。</p><p>看到这里，你就想到上节末尾的<code>[name=&#39;TextView&#39;||name$=&#39;.TextView&#39;]</code>，没错，那就是一个表达式。</p><p>表达式的作用是：限制<code>name属性</code>的范围。如果只写<code>FrameLayout</code>，那一个快照内有多少的<code>FrameLayout</code>，程序不能明白你要点击的是哪个<code>FrameLayout</code>。但是加上表达式后，程序就知道你要点击哪一个<code>FrameLayout</code>了</p><h3 id="布尔表达式"><a href="#布尔表达式" class="headerlink" title="布尔表达式"></a>布尔表达式</h3><blockquote><p>布尔表达式 由 <code>属性名</code> <code>操作符</code> <code>值</code> 构成</p></blockquote><h4 id="属性名"><a href="#属性名" class="headerlink" title="属性名"></a>属性名</h4><p>在网页审查工具中，红圈的地方就是属性名。<img src="https://cdn.jsdelivr.net/gh/adproqwq/AdproImageHostingService@main/GKD%E6%95%99%E7%A8%8B-1.6gdio2c65tg0.png" alt="属性名展示"></p><p>在实际规则编写中，一般不允许使用从<code>left</code>往下的，除<code>childCount</code>和<code>index</code>以外的属性名。</p><h4 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h4><p>操作符有：<code>=</code>， <code>!=</code>， <code>&gt;</code>， <code>&lt;</code>， <code>&gt;=</code>， <code>&lt;=</code>， <code>^=</code>， <code>*=</code>， <code>$=</code>， <code>!^=</code>， <code>!*=</code>， <code>!$=</code></p><p><code>^=</code>：<code>以...开始</code><br><code>*=</code>：<code>包含</code><br><code>$=</code>：<code>以...结束</code><br><code>!^=</code>：<code>不以...开始</code><br><code>!*=</code>：<code>不包含</code><br><code>!$=</code>：<code>不以...结束</code></p><p>这里用<code>*=</code>举例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">TextView[text*&#x3D;&#39;123&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这条规则的意思就是：选择<code>text</code>属性名中包含<code>123</code>的节点。</p><p>其它是雷同的。</p><h4 id="值"><a href="#值" class="headerlink" title="值"></a>值</h4><p>值有4种类型：<code>null</code>，<code>boolean</code>，<code>string</code>，<code>int</code></p><ul><li><code>null</code>，一般不用</li><li><code>boolean</code>：使用<code>true</code>或者<code>false</code>，比较少见</li><li><code>string</code>：使用”、`、’之一成对包裹，内部字符转义使用<code>\</code>。注意：<code>string</code>不支持多行字符，另外处于 <code>[0, 0x1F]</code> 的控制字符必须使用转义字符表示</li><li><code>int</code>：匹配<code>0-9</code>的数字，仅支持10进制</li></ul><p>特别地，有些<code>操作符</code>只能在对应的类型使用。</p><p>如<code>a&gt;&#39;&#39;</code>，学过数学的同学都知道：大于号是用来比较数字的大小的。同样的，<code>&gt;</code>这个操作符只能用于<code>int</code>类型的值，但是例子却用来比较<code>string</code>类型的值，所以它永远是不成立的。放到规则编写里，这就是非法选择器。</p><p>下面是<code>操作符</code>在<code>值</code>的类型中的可用性的表格（<code>-</code>表示不可用）：</p><p><img src="https://cdn.jsdelivr.net/gh/adproqwq/AdproImageHostingService@main/GKD%E6%95%99%E7%A8%8B-2.5n9v0l4toxk0.png" alt="可用性表格"></p><h3 id="逻辑表达式"><a href="#逻辑表达式" class="headerlink" title="逻辑表达式"></a>逻辑表达式</h3><p><code>逻辑表达式</code>有<code>操作符</code>：<code>||</code>和<code>&amp;&amp;</code></p><ul><li><code>||</code>：表示<code>或</code>，即<code>||</code>的两边只需满足其一。<code>||</code>的两边常为<code>布尔表达式</code></li><li><code>&amp;&amp;</code>：表示<code>并且</code>，即<code>&amp;&amp;</code>的两边需要全部满足。<code>&amp;&amp;</code>的两边常为<code>布尔表达式</code></li></ul><p>特别地，<code>&amp;&amp;</code>的优先级更高，即<code>[a&gt;1||b&gt;1&amp;&amp;c&gt;1||d&gt;1]</code>等价于<code>[a&gt;1||(b&gt;1&amp;&amp;c&gt;1)||d&gt;1]</code></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>GKD</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GKD</tag>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>交流专用帖</title>
    <link href="./2023/12/17/%E4%BA%A4%E6%B5%81%E4%B8%93%E7%94%A8%E5%B8%96/"/>
    <url>./2023/12/17/%E4%BA%A4%E6%B5%81%E4%B8%93%E7%94%A8%E5%B8%96/</url>
    
    <content type="html"><![CDATA[<h1 id="一、发言规则"><a href="#一、发言规则" class="headerlink" title="一、发言规则"></a>一、发言规则</h1><p>本帖用于用户自由交流，可以在下方评论区讨论任何东西，但需遵守下方规则：</p><ol><li>禁止发表违反中华人民共和国法律的任何言论。</li><li>禁止无意义发言，无意义发言包括但不限于以下形式：<ul><li>长串不知所云的文字</li><li>长串数字</li><li>等等……</li></ul></li><li>为确保网站稳定运行，会不定期清理评论，但会保留具有重大意义的评论。清理前48小时会发布置顶评论。</li><li>避免出现骂战，骂战会极大程度影响他人，请三思而后行。</li></ol><h1 id="二、相关问题"><a href="#二、相关问题" class="headerlink" title="二、相关问题"></a>二、相关问题</h1><p>同时在这里解答有关评论的相关问题。</p><ol><li><p>Q：默认头像好丑，如何更换头像？</p><p>A：请前往 <a href="https://cravatar.cn/">https://cravatar.cn</a> 通过邮箱注册并设定头像，评论时，请留下相同的邮箱。如果不想注册，可以使用数字QQ邮箱，会使用你的QQ头像。</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>公告</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>更新日志</title>
    <link href="./2023/12/17/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/"/>
    <url>./2023/12/17/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/</url>
    
    <content type="html"><![CDATA[<h1 id="2023-12-24："><a href="#2023-12-24：" class="headerlink" title="2023.12.24："></a>2023.12.24：</h1><ol><li>更新hexo至7.0.0、fluid至1.9.7</li><li>左下角增加看板娘</li></ol><h1 id="2023-12-17："><a href="#2023-12-17：" class="headerlink" title="2023.12.17："></a>2023.12.17：</h1><ol><li>允许用户评论</li><li>修改页脚</li><li>增加置顶帖</li><li>修复导航栏问题</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>公告</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>P2669金币-题解</title>
    <link href="./2023/10/27/P2669%E9%87%91%E5%B8%81-%E9%A2%98%E8%A7%A3/"/>
    <url>./2023/10/27/P2669%E9%87%91%E5%B8%81-%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="P2669-NOIP2015-普及组-金币"><a href="#P2669-NOIP2015-普及组-金币" class="headerlink" title="P2669 [NOIP2015 普及组] 金币"></a>P2669 [NOIP2015 普及组] 金币</h2><h3 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h3><p>NOIP2015 普及组 T1</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>国王将金币作为工资，发放给忠诚的骑士。第一天，骑士收到一枚金币；之后两天（第二天和第三天），每天收到两枚金币；之后三天（第四、五、六天），每天收到三枚金币；之后四天（第七、八、九、十天），每天收到四枚金币……；这种工资发放模式会一直这样延续下去：当连续 n 天每天收到 n 枚金币后，骑士会在之后的连续 n+1 天里，每天收到 n+1 枚金币。</p><p>请计算在前 k 天里，骑士一共获得了多少金币。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>一个正整数 k，表示发放金币的天数。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>一个正整数，即骑士收到的金币数。</p><h3 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h3><h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h4><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h4><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">14<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="样例-2"><a href="#样例-2" class="headerlink" title="样例 #2"></a>样例 #2</h3><h4 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入 #2"></a>样例输入 #2</h4><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">1000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h4 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出 #2"></a>样例输出 #2</h4><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">29820<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p><strong>【样例 1 说明】</strong></p><p>骑士第一天收到一枚金币；第二天和第三天，每天收到两枚金币；第四、五、六天，每天收到三枚金币。因此一共收到 1+2+2+3+3+3&#x3D;14 枚金币。</p><p>对于 100% 的数据，$$1\le k\le 10^4$$。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">k <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">1</span>ans <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ans<span class="token operator">+=</span>a    <span class="token keyword">if</span> <span class="token builtin">sum</span> <span class="token operator">==</span> a<span class="token punctuation">:</span>        <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">1</span>        a<span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token builtin">sum</span><span class="token operator">+=</span><span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我们可以通过定义一个 a，来表示第 i 天应该发放的工资数。</p><blockquote><p>当连续 n 天每天收到 n 枚金币后，骑士会在之后的连续 n+1 天里，每天收到 n+1 枚金币。</p></blockquote><p>这段话概括起来即是：骑士获得 a 个金币的工资持续的天数是 a 天。</p><p>那么，我们可以通过 sum 来计算当前是每天拿 a 个金币的第几天。</p><p>当 sum &#x3D;&#x3D; a 时，就是下一天工资就需要加多1个金币。</p>]]></content>
    
    
    
    <tags>
      
      <tag>洛谷</tag>
      
      <tag>题解</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
